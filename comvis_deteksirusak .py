# -*- coding: utf-8 -*-
"""Copy_of_coba_comvis3_terbaru.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3O67iSgz6wj1fp0-ueKGkI_Rai72lLg
"""

import os
import cv2
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import joblib

# Path folder dataset
dataset_path = "/content/dataset"
categories = {"damaged": 1, "undamaged": 0}  # Mapping kategori ke angka

def extract_features(image_path):
    """Ekstraksi fitur dari gambar."""
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if img is None:
        print(f"Gagal memuat gambar: {image_path}")
        return None

    edges = cv2.Canny(img, 100, 200)  # Deteksi tepi
    edge_density = np.sum(edges) / (img.shape[0] * img.shape[1])  # Kepadatan tepi
    return np.array([edge_density])

# Load dataset & ekstraksi fitur
features_list, labels = [], []
for category, label in categories.items():
    folder_path = os.path.join(dataset_path, category)
    if not os.path.exists(folder_path):
        print(f"Folder {folder_path} tidak ditemukan, lewati...")
        continue

    for filename in os.listdir(folder_path):
        image_path = os.path.join(folder_path, filename)
        features = extract_features(image_path)
        if features is not None:
            features_list.append(features)
            labels.append(label)

# Konversi ke array numpy
features_array = np.array(features_list)
labels_array = np.array(labels)
print(f"Jumlah sampel dataset: {features_array.shape}")

# Standarisasi fitur
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features_array)

# Split dataset untuk training dan testing
X_train, X_test, y_train, y_test = train_test_split(features_scaled, labels_array, test_size=0.2, random_state=42)

# Latih model Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluasi model
y_pred = model.predict(X_test)
print(f"Akurasi: {accuracy_score(y_test, y_pred) * 100:.2f}%")
print(classification_report(y_test, y_pred))

# Simpan model dan scaler
joblib.dump(model, "building_damage_model.pkl")
joblib.dump(scaler, "scaler.pkl")
print("Model berhasil dilatih dan disimpan!")

# Path gambar yang ingin diuji
image_path = "/content/dataset/uji/7432951.jpg"
def predict_image(image_path, model, scaler):
    features = extract_features(image_path)
    if features is None:
        return "Gagal membaca gambar."

    features = features.reshape(1, -1)
    features_scaled = scaler.transform(features)
    pred = model.predict(features_scaled)

    return "Bangunan RUSAK" if pred == 1 else "Bangunan TIDAK RUSAK"

# Prediksi hasil deteksi
result = predict_image(image_path, model, scaler)
print(f"Hasil deteksi: {result}")

# Uji Citra Baru

from google.colab import files
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

# Upload gambar uji
uploaded = files.upload()
for filename in uploaded.keys():
    test_img_path = filename
    test_img = Image.open(test_img_path)

    # Tampilkan gambar uji
    plt.imshow(test_img)
    plt.axis('off')
    plt.title("Gambar Uji")
    plt.show()

    # Ekstraksi fitur gambar uji
    test_features = extract_features(test_img_path)

    # Standarisasi fitur uji menggunakan scaler yang telah dilatih
    test_features_scaled = scaler.transform([test_features])

    # Prediksi dengan model yang telah dilatih
    predicted_label = model.predict(test_features_scaled)[0]

    # Konversi hasil ke label
    label_dict = {0: 'undamaged', 1: 'damaged'}
    label_text = label_dict.get(predicted_label, 'Tidak diketahui')

    # Tampilkan hasil
    print(f"Hasil klasifikasi: {label_text}")